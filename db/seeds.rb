User.create!(name: "Hiroaki Satou",
            email: "hiroakisatou@outlook.com")
Page.create!(user_id:1,
            title:"Grokking Web Application Security",
            slug:"grokking-web-application-security",
            author: "Malcolm McDonald",
            publisher: "Manning Publications",
            publisher_url: "https://www.manning.com/",
            published: true,
            summary: "GrokkingシリーズはManningが難しい概念をわかりやすく解説している本として評価が高い本が多いです。この本もウェブアプリケーションセキュリティというお堅い話題を面白い話をまじえてわかりやすく紹介しています。洋書に抵抗のない方でウェブアプリケーションのセキュリティについて知識が浅い方にはおすすめです。",
            content:"Grokkingシリーズはアルゴリズムや関数型プログラミングの書籍が日本語訳されていて、ご存知の方も多いかもしれません。このシリーズは難しいことを図版やジョーク混じりの丁寧な説明の文で解説していて分かりやすさに定評があります。そのApplication Security版がMEAP（出版前の本を購入出来るManningのベータ版の出版形式）で出ていたので、Ruby on Railsチュートリアルでちょうどセキュリティの問題への対処が紹介されていたので、理解を深めるために購入してみました。まず、章が短く区切ってあって読むのに疲れて章の途中で投げ出してしまうということがありません。そして一つ一つのWeb Applicationの脆弱性について15章を割り当てて、かなり網羅的に書かれています。脆弱性の対処の仕方についてはRuby, Python, JavaScript, WebServerの設定など掲載コードが多様なので、私はRailsではどんな対処をしているのかChatGPTに尋ねながら読みました。分からない単語もちらほらありましたが、全体像をつかむのにはあまり支障はありませんでした。ジョークのところに分からない単語があることが多いです。この本を一冊読めば、一通りウェブアプリケーションの脆弱性の知識を得ることが出来ます。例えば、自分がアプリケーションを作るときにどんなことに注意しなければいけないか、例えばユーザー認証のために送ったメールを悪意のある人が似せて作って悪意のあるサイトに飛ばすURLを記載したらどうなるか、あなたが信頼のあるドメインからメールを送らなければメールソフトをそういったメールを迷惑メールに自動的に入れてしまいます。よく知られた脆弱性XSS等のケースは前半にギュッと詰まっていますので前半を読むだけでもためになります。後半になるとあり得なさそうなケース、例えば昔のウェブアプリはURLで渡されたパラメータをサニタイズせずにそのままパラメータとして評価して検索等を実行していた等、ウェブアプリケーションフレームワークが普及では想像も出来ない事例も出てきます。全体として、文章から手口は想像がつくようになってますが、真似されないようにそこまで具体的に書いてない部分はChatGPTに聞くと良いかもしれません。私はＷｅｂアプリケーションのセキュリティについてこの本で初めて学んだので、勉強になりましが、日本語でも同じような内容がわかりやすく解説されている本が出ているかもしれません。でも私は洋書で本を読むのが好きなので大雑把に理解出来て、実装のときに思い出して確認出来る本があれば十分なのでこの本を選びました。まだMEAP（ベータ版）ということもあり万人におすすめは出来ませんが、洋書を読むのが好きで、分からなかったらどこが分からないのかChatGPTに聞ける人なら読みやすい本です。" )
Page.create!(user_id:1,
            title:"半導体戦争",
            slug:"chip-war",
            author: "クリス・ミラー",
            publisher: "ダイアモンド社",
            publisher_url: "https://www.diamond.co.jp/",
            published: true,
            summary: "現在、私達の身近に溢れる半導体産業がその勃興から今日の姿になるまでに、いかに政治的方針や軍事的需要によって影響されて形作られてきたのかを書いた本。半導体の歴史をただ書いた本ではなく、著者によるその政治的重要性を描いているので、新たな視点が得られるところが面白い。",
            content:"アメリカでベストセラーになったらしく大型書店の洋書売り場でよく見かけるので読んでみたいなと思っていたら、翻訳が出ているのを見つけて読み始めた。いまアマゾンの履歴を見たら2023年の8月に買った本なので、2023年は技術書ばっかり読んでいて読む時間がなく4ヶ月以上も読むのに時間がかかってしまったようだ。2023年は技術書を沢山読んでいたので、つい後回しになってしまったのはすぐに実践で役立つわけではないからで、読み物としてしてはとても面白い本だった。この本の何が面白いかというと、半導体メーカー同士に技術開発競争や経済的競争だけに焦点を当てた本ではなく、半導体がいかに国家戦略という政治的課題や兵器製造という軍事的課題と密接に結びついて産業として発展してきたかを描いているところにある。そしてそれがロシアのウクライナ侵攻が行われた最近に至るまで丁寧に書かれていて、もちろんそれには台中戦争のリスクを書く必要性があるから比較として書かれているわけだけれども、最近の動向まで描かれていて最後まで興味深い考察が続いている。現在、私達の生活で毎日使用しているあらゆる機器に半導体は搭載されている。半導体の量産には多額の投資が必要で、その国の産業の発展とも結びついているため、国家戦略にとって重要な課題と見なされている事実をこの本は指摘する。いつの間にかTMSCという名前も聞いたことがなかった台湾企業が世界のトップ企業に踊りでたのはそういう背景があったのかと納得させてくれる。それを踏まえて現在の日本の半導体産業の衰退を考え直してみると、日本は国家戦略として半導体産業を支えることに失敗したのではないかと思える。日本の半導体メーカーが巨大な投資を行い続けて、TMSCやサムスンと競争して、自社設計にこだわらずに海外の半導体の生産だけに注力するには、低い金利や円高政策に加えて税制的な優遇や研究開発への資金援助が必要であっただろう。そして半導体を生産するメーカーがいくつもあって、そのどれもが巨大な投資をし続けるには小さすぎた事も原因であろうと私は考える。台湾のTMSCとソニーが合同で日本国内に工場を作ることになったのも、どうやらTMSCのような巨大資本の力を借りなければ、日本国内の半導体製造を下支えする企業を守っていくことが出来ないと考えた日本政府の政策によるところがあるとこの本に書かれている。日本は台中関係のような大きな軍事リスクが目の前にないので、半導体製造において優位な面があると思うが残念なことである。そんなことを読んでみて考えてみたが、私の期待値を上回る半導体が既に大量に出回って使われている事実が現在ある。その技術革新が政治的な問題や軍事的衝突などで遅れたとしても、半導体は簡単に壊れるような部品でないし、現在あるものでわりと満足しているので大した問題では私にはない。でも私にも間接的に影響を及ぼしているであろう日本の産業の多くは、半導体の技術革新が遅れれば、新製品の製造に遅れが出て経済的にも打撃を受けるのは事実であろう。そのような事実にこの本を読んで視点を向けてみるのも良いかもしれない。" )
Page.create!(user_id:1,
            title:"Ruby on Rails Ttutorial（Rails チュートリアル）",
            slug:"ruby-on-rails-tutorial",
            author: "Michel Hartl",
            publisher: "Ruby on Rails チュートリアル",
            publisher_url: "https://railstutorial.jp/",
            published: true,
            summary: "Ruby on Railsをやるなら、この本で勉強すれば間違いないという程の定番書。洋書の書籍や作者のサブスクライブ制のウェブチュートリアルと比べると、とてもわかり安い日本語訳が安価な値段で手に入るのがとてもありがたい。もちろんWebアプリケーションを作りたい人にもおすすめだが、Ruby言語のベストプラクティスを学びたい人やMVCパターンやDRYなコードといった他の言語にも通用するコーディングスキルを磨きたい人にもおすすめ。",
            content:"実はこの本はAddison-Wsleyから出版されているものを2022年の11月頃に一度挑戦していて、訳がわからなくなって挫折してしまっていた本なんです。この本の翻訳がWebページとしてで安価に閲覧出来ることをしったのが11月末ぐらいで、約1ヶ月で終わらせることが出来ました。英語で読んだときは難しく感じた説明も日本語で読むとずっと理解が早いし、分からないことはChatGPTがあるので質問しながら読めるので、今回はそれほど難しく感じませんでした。例えば、method option: :valueのような書き方をrailsでは多用するのですが、Rubyの名前つき引数はoption:という書き方をして、シンボルは:symbolという書き方をすることをちゃんと知ってないと、とても不思議な構文に見えると思うんです。Rubyを久しぶりに触った私はそんなことまでChat GPTに質問しまくってました。基本的に書籍として販売されているものも、作者がネットでサブスクリプションで公開されているものも、日本語訳も同じ内容を説明しています。でも英語版サブスクリプションでは有料化されたHarokuにデプロイしているのに対して、日本語版では無料のrenderにデプロイするようになっているなど、使い勝手良く改良されているようです。この本の良いところは、ちゃんと書いたコードをテストするところまで詳しく説明しているところです。TestフレームワークはRails標準のMini TestなのでRSpecに興味がある方は他で勉強する必要があるでしょう。とにかくTestがあるから、ちゃんと間違えたコードもキャッチ出来るので、途中でおかしいと思ったらTestでコールされる部分がちゃんとコールされているか確認する必要があります。私はこの本にTestのおかげでrememberというこの本で作るメソッドが誤って2回コールされていて、一度forgetされた値が再設定されていることに気づきました。多分、この本で躓く部分ってTestが通らなくなって何がなんだか分からなくなった時だと思うのですね。でもこの本は相当レビューされていてコードは間違っていないので、自分が書き間違えているこますので冷静にデバッグすることが求められます。そんなわけでこの本のあとはRSpecの勉強などしてみようかなとおもっています。この本でRailsの基本的な書き方を深く理解出来るし、説明もその都度あって適切なものなので、とても良い本だと思います。ネットで検索するとこの本を何回も読んでいる人が見つかります。私は本を何度も読むのは好き）でないですが、もしもう一度挑戦するならRSpecでテストを書いて挑戦したいですね。それはともかくとして、何周も読む価値があると考える人がいる程によく出来たチュートリアルだと私も思います。" )
Page.create!(user_id:1,
            title:"独習Ruby",
            slug:"teach-yourself-ruby",
            author: "山田 祥寛",
            publisher: "翔泳社",
            publisher_url: "https://www.shoeisha.co.jp/bookinfo",
            published: true,
            summary: "独習シリーズといえば、わかりやすく網羅性のある言語解説で定評のあるシリーズである。C#やPHPの本などはわりと評価されているが、そのRuby版もあなどれない出来である。プログラミング初心者にはチェリー本をおすすめするが、以前Rubyを勉強したことがある人がRubyを勉強したいという用途にはぴったりな出来の本になっている。",
            content:"山田 祥寛さんといえば、様々な分野のプログラミングの本を手掛けるテクニカルライターだが、そのクオリティがどれもわりと高いことで有名である。私はRubyにチェリー本で入門したが、1年ぐらいずっとPythonを書いていたのですっかり忘れてしまっていた。そんな私にこの本はぴったりであった。なぜかと言えば、このシリーズはコードとその実行結果をちゃんと載せて解説しているからである。いちいちコードを入力して確かめるなくても、作者の解説がすらすら入ってくる。2冊目にコードを書いて入門する必要はないので、それで良いのだと思う。私はこの本を読んだあとLeet Codeというアルゴリズムとデータ構造の問題が多くあるサイトをRubyで解いて実際のコーディング力を磨いた。私は最近やっとプログラマーになるのは止めて趣味でプログラミングをやろうと決めたので、だったら好きな言語でプログラミングしよう。私の一番好きな言語といったらRubyじゃないかと思ってこの本で再入門して十分に使える知識を短期間で得られたという次第である。Rubyは非常に柔軟な言語で、一冊では網羅出来ないような、こんな機能もあるのかというトピックもある。そういうわけでこの本はProcやLamdaなんかは掲載されてないので、その点は自分で調べる必要がある。チェリー本にしてもRubyの全機能を網羅しているわけではない。例えば、チェリー本に載ってなかったのか読み飛ばしてたのかわからないが、私がこの本で知ったのはStructにブロックを持たせることで、そこにメソッドが定義出来ることである。これはクラスの内部にもデータ構造として定義出来るのでクラス内部で何かの処理をモックした処理なんかを作るのに非常に便利である。まあ、使っているとこんな便利な機能もあるのかとハマっていくのがRubyに魅力でもある。ちゃんとメタプログラミングの章もあって、Railsのモデルがデータベースのテーブルに合わせてアクセサーメソッドを提供できるのは、こういうわけだよという解説がある。読みづらい本で私も全部読んでいないのでレビューには掲載予定のない、Well ground Rubyという洋書のほうが、そのようなRubyの深みにある機能には詳しい。たまにRailsを触る人などは、この本を読めばRubyの機能を1〜2週間で復習出来てしまうので、そういう意味でもうちょっと評価されても良い本だと思う。" )
Page.create!(user_id:1,
             title:"A Common-Sense Guide to Data Structures and Algorithms, Second Edition",
             slug:"a-common-sense-guide-to-data-structures-and-algorithms",
             author: "Jay Wengrow",
             publisher: "The Pragmatic Bookshelf",
             publisher_url: "https://pragprog.com/titles/",
             published: true,
             summary: "とても分かりやすいアルゴリズムとデータ構造。この本だけで代表的なアルゴリズムとデータ構造の基本とPyhton等のスクリプト言語での実装方法が分かる。あとはLeetCodeで実際のデータ構造を操作するコードを沢山書いていけば、プログラマーとして実装方法を考える力は間違いなく伸びていくんじゃないかと思われる。",
             content:"最近、同じ著者の「A Common-Sense Guide to Data Structures and Algorithms in Python, Volume 1」という本が出た。多分、同じ著者なのでクオリティは同じように高く、使用する言語をPythonに絞ったものに仕上がっているのだろう。こちらの本はアルゴリズムとデータ構造の実装をPython, Ruby, JavaScriptで行っている。私はJavaにあるデータコレクションがどんな役割を持っているのかさっぱり分からなくてこの本を読んだのだが、アルゴリズムとデータ構造の本としては全然堅苦しいことがなく、全くの初心者でも順に読み進めていけばLinked ListやStack、Graph、Treeといった代表的なデータ構造や各種のsortアルゴリズムや再帰の使い方について理解を深めることが出来るように書かれている。Leet Codeで問題を解いていくほうが実践的なアプローチだし、勉強にもなるが、その前にこの本を読んでおくとこのアルゴリズムはO(n)の処理速度であるといった説明に抵抗がなくなる。処理速度の定義などに細かく触れているからだ。それとLeet Codeは問題量が多すぎて、多くのデータ構造を大雑把にどんなものか理解しておきたいという目的には向いていない。アルゴリズムの本としては異例のコンパクトなこの本で必要な知識を入れてしまったほうが早い。実際のところ、Javaと違ってPythonやRubyには特定のデータ構造を実装したライブラリは少ないので、ほとんどのアルゴリズムは実際の実装で使う機会はないにしても、実装の仕方を知っているといればいざというときに役に立つというメリットもある。この本か著者の最新作でアルゴリズムに入門してLeet Codeでアルゴリズムとデータ構造の問題を沢山解いてみるというのが、プログラミングでより良い実装をするためには最も有効なアプローチであろう。初心者のプログラマーは言語やライブラリを覚えるのに時間がかかりすぎて、実際にどういう風に頭を働かせたらプログラムで問題を解決する勉強を怠りがちである。20年ちかく前にプログラミングを始めて勉強したときの私もまさにそうであった。そして成果物も十分になくプログラマーへの就職の機会を失ってしまい今に至る。今はなるべく本を読んだらその本から発展させてオリジナルのプロジェクトにしたりLeet Codeの問題に取り組んだりしているが、趣味でプログラミングをやる人がプログラミングを上達するには、実践的なアプローチがかかせない。そんなわけで、アルゴリズムとデータ構造に気軽に入門したい人、ただしTOEIC 700点以上の読解力のある方にはおすすめの本である。蛇足だが私はTOEIC 720点でプログラミングの本は不自由なく洋書でも読みこなせている。")
Page.create!(user_id:1,
            title:"プロを目指す人のためのRuby入門",
            slug:"introduction-to-rubu-programming-for-future-professionals",
            author: "伊藤 淳一",
            publisher: "技術評論社",
            publisher_url: "https://gihyo.jp/book/2021/978-4-297-12437-3",
            published: true,
            summary: "Rubyは非常に強力なオブジェクト指向言語であり、unless文の存在やif文の後置修飾など、初心者レベルで使う機能にも独自の機能が満載されている。だから他の言語の経験者も油断せず、ちゃんと理解しておきたい機能を丁寧に解説した本が必要なのである。そしてRuby言語は非常に機能豊富でそれを網羅するとどうしても厚い本になってしまいがちである。この本はそういった機能を網羅しつつも分かりやすい解説で最後まで飽きずに読めるまさにRuby入門にぴったりの本として一番のおすすめ。",
            content:"1300ページという厚さにかかわらず、説明が平易であっさりと読めてしまうRubyの入門書。一時期のRailsによるRubyブームはさったものの、Railsの機能は非常に成熟しており、Djangoに見劣りする管理画面機能やAuthentication機能もライブラリの導入で容易に取り入れる事が出来る。そしてHotwireを使えばReactを使わなくてもHTMLの一部だけを再描画することが出来るという魅力もある。そしてDjangoのORMより強力なメソッド自動生成機能をもつActiveRecordの機能を提供しているのがRubyのメタプログラミングによる機能である。最近、趣味としてプログラミングを始めた私が過去一番好きだった言語としてRubyを選んで最初に読んだ本がこの本である。そのあとPythonに浮気を8ヶ月以上していたのだが、やっぱりPythonよりRubyのほうが趣味でプログラミングするなら優れていると思う。たとえばPythonでは別のデータ構造になっているcounterをRubyでは、counter = Hash.new(0)のようなふうに書くことが出来る。Rubyは正規表現も別のライブラリになってないので、Pythonのコードより気軽に利用出来る。Rubyはタプルがないかわりに戻り値を複数にすることが出来る。わざわざタプルに入れて戻り値を返す必要がない。でもPythonは流行りで機能もどんどん更新されているので、Rubyのほうが一概に良いとは言えないのも事実。最後は好みの問題である。でも入門書のクオリティの高さはPythonの数ある入門書を抜いてRubyのこの本のほうがうえであると思う。例えば、海外のPython入門書の定番（これで私はPythonを勉強した。全部読んでないのでレビューする予定なし）のCrash course of Pythonではタプルがmutableなデータ構造であることや、正規表現の使い方にも触れていない。その代わり言語仕様の説明だけなら薄くて初心者が導入がしやすいのである。Rubyは非常に便利だがオブジェクト指向に慣れてないと理解の難しいattr_acceserのようなヘルパーメソッドやModuleのmixin、LamdaとProcと二つの用途の無名関数があるといった理解できれば便利な機能が多いのである。あと個人的に好きなのが名前つき引数をmy_method(arg1: value1, arg2: value2, arg3: value3)と定義できる点、これでmy_method arg1:'value'という呼び出しが書ける。呼び出しに括弧も必要ないし、railsではこうした書き方が多用される。どうも、こういう理解すればなんともないが、オブジェクト指向言語や関数型プログラミング言語の良いところも取り込もうとしたところがRubyを難しくしているようだ。そういうところをこの本はかみ砕いて優しく説明してくれている。そんなのプログラミング初心者じゃなければ誰でも知ってるよというところから非常に丁寧に詳しく書かれている。そう、あなたがリンクリストを実装したクラスを作って、それをイテレーターで順番に取り出したいと思う日が来るかもしれない。ちゃんとアルゴリズムとデータ構造の勉強をしているとリンクリストは必ず勉強することになる。そのとき、どうやってRubyに自前でJavaScriptのforEachのようなメソッドをクラスにもたせるか、この本にはちゃんと書いてある。そういう深いところまで書いているので、この厚さの本になっているのだということがある。そんなわけでRubyをただ使いこなしたいだけなら、全部理解する必要はないが、知ってるとこんなにプログラミングって楽しいんだと思わせてくれるRubyの深みに足を踏み入れるには貴重な和書である。いやもっとRubyの深みだけを解説した本が洋書にはあるが、気軽に読めるRubyの初心者向けの本が洋書にはない。これがRubyよりPython のユーザーが海外で多くて、強力なライブラリが増えた理由の一つかもしれない。")
Page.create!(user_id:1,
            title:"Java: A Beginner's Guide",
            slug:"java-a-beginners-guide",
            author: "Herbert Schildt",
            publisher: "McGraw Hill",
            publisher_url: "https://www.mhprofessional.com/java-a-beginner-s-guide-ninth-edition-9781260463552-usa",
            published: true,
            summary: "Herbert Schildtという人はJava: The Complete Referenceという人気の高いJavaのリファレンス本の著者であり、そうした本の著者がJavaの入門者向けに書いた本だから内容の詳細さに信頼がおける。そして海外の人気書籍でJavaを勉強するメリットの一つとして、GitHub copilotというAIがメソッド名などから推測して中身のコードをそのまま本の通りに挿入してくれることがある。Javaのように冗長な記述が必要な言語ではこれは大変助かる。というわけでJavaのを覚えたいけど、いちいち自分で本のコードを入力してられないという人には大変お勧めな本である",
            content:"Herbert Schildtという人はJava: The Complete Referenceの著者であり、この本かCay S. HorstmannのCore JavaがJavaを書く人にとっては人気の高いリファレンス本になっている。Javaの機能は膨大なので全部覚えていたら大変というわけで、Javaの世界ではこうしたリファレンス本が重宝がられているようである。そのような信頼されるリファレンス本を書いている著者が初心者向けにJavaの基本機能を丁寧に解説してコード例を豊富に載せているのがこの本である。それだけに、Javaの初心者を惑わせがちなInterfaceやGenericsの解説なども非常に分かりやすく、多くの人が疑問を抱くであることに先回りして回答してくれるような丁寧さがある。そうCとJavaは多くの言語に影響を与えた、最もよく使われる言語の代表格的な存在で、その仕様を知っていると他の言語の仕組み、例えばswiftのgenericsなども理解しやすくなるというメリットがある。私はPythonやRubyが簡素で好きなので、けしてJavaで実際のプログラムを書こうとは思わないが、先のような理由からJavaの仕様を復習しておきたくて読んだ本である。Javaのメージャーバージョンアップを控えていたので、新しいJavaの言語仕様であればもっとJavaを使おうという気持ちになったかもしれないが、JavaはC#と違いvarで変数を定義する文化がそれほど根付いてないようである。一つのメソッドを書くにもいちいちアクセス修飾子を書いて引数を型指定して戻り値を型指定してと、とても書くのに面倒である。copilotのようなAIが本のコードを記憶してくれているので、（誰かがこの本の通りに書いたコードをGithubにあげたらしい、copilotはgithubのコードから学習してコードを自動挿入してくれるAIである。）copilotにコードを挿入させて実際に実行してみるのが手っ取り早いんじゃないかと思う。この本だけではJavaのCollectionクラスやStream APIまではカバーしてないので、それはJava Complete Referenceを見て欲しいということだろう。Javaは求人数も群をぬいて多いし、知っていて損のない言語ではある。ところが趣味でプログラミングを書く私には知識以上には必要ない言語である。実際にJavaを応用して作られるWeb ApplicationではDBやサーバーの速度がボトルネックになるので、Javaの実行速度が早い問題は関係ない。私はMacユーザーなのでSwiftでデスクトップアプリを書くし、WindowsユーザーならC#を使うだろう。型指定でコンパイル時にエラーに気づきやすいといったメリットは、ちゃんとテストを書けば問題ない。いや型指定のせいでテストを書くのも面倒な言語のほうが、簡単にテストが書けるPythonやRubyより保守性は低いだろう。テストがあれば安心してリファクタリング出来る。Rubyには英語の文にちかい記述でテストが書けるRSpecがある。アプリケーションのテストを下請けする会社が存在するが、コードのクオリティとテストを書いたうえでのリファクタリングは不可分の存在なので他社に任せるなんて考えられないことである。ということで、Javaという言語がどうしてこんなに人気があるのかよく分からないが、Javaのオブジェクト指向がちゃんと理解出来ていれば、他のオブジェクト指向言語を理解するのも早い。だからJavaは知っていて損のない言語だし、このような海外でベストセラーになっている本を使うとcopilotがコードを自動挿入してくれるので、実際に動かすのも面倒がないので好都合である。copilotを使うために洋書を選んで勉強するというのも一つの手である。まあ、ソースコードが公開されているので、それをそのまま実行するというのもありだが、それだと重要な部分だけ選んで自分で書くという柔軟性が失われるので、私はcopilotを勧めたい。")

